프로세스와 스레드
- 프로세스 : 프로세스는 실행 중인 프로그램의 인스턴스로 독립된 메모리 공간(코드, 데이터, 스택등 -> 그렇기 떄문에 다른 프로세스의 변수들의 접근이 불가능)
            과 운영 체제 리소스를 갖는다.

- 스레드 : 스레드는 프로세스 내에서 실행되는 실행 단위로 프로세스의 메모리와 리소스를 공유한다. . 경량 프로세스(LWP)라고 불리기도 한다. 


프로세스 생명 주기
- 생성(Forking) : 새 프로세스는 기존 프로세스가 "fork()" 시스템 호출을 통해 자신의 복사본을 만듦으로서 생성된다. fork()는 부모 프로세스와 동일한 메모리 레이아웃을 가진 자식 프로세스를 생성한다.
- 실행(Executing) : 프로세스는 exec() 시스템 호출을 통해 사용하며 새 프로그램을 로드하고 실행한다. 이는 프로세스의 메모리 공간을 새 프로그램으로 대체한다.
- 중지(Waiting/Sleeping) : 프로세스는 I/O 작업, 데이터 요청 등을 기다리는 동안 대기 상태가 될 수 있습니다.
- 종료(Terminating) : 프로세스는 작업을 완료한 후 종료됩니다. 이는 exit() 시스템 호출을 통해 이루어집니다. 



프로세스 스케쥴링
- 리눅스 커널은 CPU시간을 프로세스와 스레드에 할당하는 스케쥴러를 포함한다.
- 스케쥴링은 프로세스와 우선순위와 상태(대기, 실행, 중지 등)에 따라 결정된다. 


인터프로세스 통신(IPC)
- 프로세스 간에 데이터를 교환하거나 상태를 조정하기 위한 메커니즘입니다. IPC방법에는 파이프, 메세지, 큐, 세마포어, 공유 메모리 등이 있다.
- IPC 방법은 단방향이냐 부모에서 자식으로 이냐 양방향이냐 이런것에 따라서 방법이 달라진다.

프로세스 동기화 
- 멀티 스레딩 환경에서 데이터의 일관성을 유지하고 데드락을 방지하기 위해 프로세스 및 스레드의 동작을 동기화하는 메커니즘이 필요.
- 이를 위해 뮤텍스, 세마포어 조건 변수가 사용된다. 