컴퓨터의 구성요소는 하드웨어(HW) 와 소프트웨어(SW)으로 구성되어있고 소프트웨어는 다시 운영체제와 운영 프로그램으로 나뉘게 된다. 
운영체제는 우리가 알고있는 OS 가 포함되고 운영 프로그램은 word, powerpoint 등이 포함된다. 

그리고 마지막으로 OS 가 2개로 나뉘게 되는데 하나는 커널, 시스템프로그램이다. 

리눅스커널은 OS의 역할을 하며 주로 디바이스 관리, 프로세스 관리, 메모리 관리, 시스템 콜 제공과 같은 기능을 갖는다.(컴퓨터의 자원을 추상화시켜준다.)


%커널의 주요 기능
1. 메모리 관리: 커널은 시스템의 모든 메모리를 관리합니다. 이에는 프로세스에 메모리를 할당하고 회수하는 것이 포함됩니다.
2. 프로세스 관리: 커널은 프로세스 생성, 실행, 중단 및 종료를 관리합니다. 프로세스 스케줄링을 통해 CPU 시간을 각 프로세스에 할당합니다.
3. 장치 드라이버 관리: 커널은 다양한 하드웨어 장치와의 통신을 관리하는 장치 드라이버를 포함하고 있습니다.
4. 시스템 호출 및 인터페이스 제공: 커널은 사용자 프로그램이 시스템 자원을 안전하게 사용할 수 있도록 시스템 호출 인터페이스를 제공합니다.
5. 보안 및 접근 제어: 커널은 시스템 보안을 유지하고, 자원에 대한 접근을 제어합니다.


%Realtime system을 만들 때 중요한 부분
- Realtime 관련 커널 옵션 : 커널을 실시간으로 구성할 때는 실시간 관련 옵션들을 활성화해야 합니다.  CONFIG_PREEMPT_RT_FULL, CONFIG_HIGH_RES_TIMERS, CONFIG_PREEMPT 등의 옵션이 중요합니다.
- 커널 튜닝: 실시간 시스템의 성능을 최적화하기 위해 커널 파라미터를 조정할 필요가 있습니다. 예를 들어, 인터럽트 처리 방식, 타이머 해상도, 스케줄링 정책 등을 조정할 수 있습니다.




%Realtime 관련 커널 옵션
1. CONFIG_PREEMPT_RT_FULL
    - 커널의 완전한 사전 점유를 활성화 한다. 커널이 실행 중인 태스크를 더 빈번하게 중단하고, 실시간 태스크가 CPU를 즉시 점유할 수 있도록 한다.
    - 커널에서 실행되는 코드가 실시간 태스크의 실행을 지연시키는 것을 최소화한다. 

2. CONFIG_HIGH_RES_TIMERS
    - 높은 해상도 타이머를 사용하는 타이머 기반의 작업을 더 정밀하게 스케쥴링한다.
    - 타이머 인터럽트의 시간지연을 줄여 타이머 기반 이벤트에 대한 반응 속도를 향상시킨다. 

3. CONFIG_PREEMPT
    - 이 옵션은 커널에서 실행되는 일반 코드가 사전 점유될 수 있도록 한다. 이는 커널이 유저 공간의 태스크를 더 빠르게 실행하도록 도와준다. 
    - 일반적인 운영 체제 활동에 대해보다 나은 반응 시간을 제공한다. 


1번 (CONFIG_PREEMPT_RT_FULL)와 3번(CONFIG_PREEMPT)는 서로 배타적인 관계이기 때문에(1번은 모두 RT 시스템, 3번은 기본적으로는 일반 점유이며 코드를 통해서 스레드나 프로세스에서 RT 시스템으로 변경가능) 같이 사용될 수 없다.




%커널의 임계영역(Critical section)
-임계 영역은 여러 스레드 또는 프로세스에 의해 동시에 접근될 경우 문제를 일으킬 수 있는, 공유 자원에 대한 접근을 관리하는 코드 영역을 말합니다.

-공유 자원: 메모리, 파일, 변수 등 여러 태스크 간에 공유되는 자원입니다.
-동시 접근 방지: 임계 영역 내의 코드는 한 번에 하나의 태스크만 실행할 수 있도록 보호되어야 합니다. 이를 위해 락(lock) 같은 동기화 메커니즘을 사용합니다.
-데이터 일관성 유지: 임계 영역의 목적은 데이터의 일관성과 무결성을 보장하는 것입니다. 예를 들어, 두 개의 스레드가 동시에 같은 데이터를 수정하려고 할 때 발생할 수 있는 문제를 방지합니다.



%인터럽트 핸들러
-인터럽트 핸들러는 하드웨어 또는 소프트웨어 인터럽트에 응답하여 처리를 수행하는 커널의 일부분입니다.

-인터럽트: 인터럽트는 프로그램의 일반적인 흐름을 중단시키고, 특정 이벤트(예: 입출력 요청 완료, 타이머 만료)에 대응하기 위해 시스템에 의해 발생시키는 신호입니다.
-인터럽트 핸들링: 커널은 인터럽트 신호를 받으면 현재 작업을 중단하고 인터럽트 핸들러를 실행합니다. 인터럽트 핸들러는 해당 인터럽트를 처리한 후 일반 작업 흐름으로 복귀합니다.
-시스템 응답성: 인터럽트 핸들러는 하드웨어로부터의 신속한 반응을 필요로 하는 작업을 처리하는 데 중요합니다.


%사전점유와의 관계
-일반적인 리눅스 커널에서는 임계 영역과 인터럽트 핸들러가 사전점유될 수 없습니다. 이는 시스템의 안정성을 위해 필요하지만, 반응 시간을 늘릴 수 있습니다.


%% 여기서 CONFIG_PREEMPT와 CONFIG_PREEMPT_RT_FULL의 차이가 나타난다. 
CONFIG_PREEMPT
- 일반 사용자 공간 작업에 대한 사전점유를 허용합니다. 이는 커널이 사용자 공간 코드(애플리케이션)에 CPU를 빠르게 반환할 수 있도록 합니다.
- 커널 모드에서 실행되는 작업은 임계 커널 경로(critical kernel paths)에서는 사전점유되지 않습니다. 이는 시스템 안정성을 유지하기 위해 필요합니다.
- 커널이 시스템 호출을 처리하거나 장치 드라이버 코드를 실행하는 동안에는 사전점유가 제한됩니다.

CONFIG_PREEMPT_RT_FULL
- 커널 모드에서도 거의 모든 코드를 사전점유 가능하게 만듭니다. 이는 커널이 더 많은 작업을 중단하고 높은 우선순위의 태스크를 실행할 수 있음을 의미합니다.
- 이 설정은 커널의 대부분의 임계 영역(critical sections)과 인터럽트 핸들러에서도 사전점유를 허용합니다. 이로 인해 커널 작업 중에도 높은 우선순위의 인터럽트나 태스크가 즉시 처리될 수 있습니다.
- 이러한 높은 수준의 사전점유는 시스템의 반응 시간을 최소화하며, 실시간 작업에 매우 중요합니다

-> CONFIG_PREEMPT 는 CONFIG_PREEMPT_RT_FULL 보다 안정성에서 더 높은 장점을 가지며 반응성에서는 더 낮은 안정성을 갖게 된다. 



