병렬처리(Parallel Processing)

정의(?)
병렬 처리(Parallel Processing)는 컴퓨팅 작업을 여러 개의 독립적인 부분으로 나누어, 이를 동시에 실행하는 방식입니다. 
병렬 처리의 목적은 작업의 실행 속도를 향상시키고, 계산 자원을 보다 효율적으로 활용하는 것입니다. 
특히 대규모 데이터 처리, 복잡한 과학적 계산, 고성능 컴퓨팅 등의 분야에서 중요한 역할을 합니다.

특징
- 동시 실행 : 병렬처리는 여러 프로세서 또는 멀티코어 CPU 에서 동시에 여러 계산을 수행합니다.
- 직업 분할 : 큰 작업을 더 작은 서브 작업으로 나누고 이들을 동시에 다른 프로세서에서 처리합니다.
- 자원 활용 : 병렬 처리를 통해 단일 프로세서 시스템보다 더 많은 계산 자원을 활용할 수 있습니다. 

병렬 처리의 유형
- 데이터 병렬성(Data Parallelism): 동일한 연산을 서로 다른 데이터 세트에 동시에 적용합니다. 예를 들어 대량의 데이터에 같은 알고리즘을 병렬로 적용하는 경우가 여기에 해당합니다. 
- 작업 병렬성(Task Parallelism) : 서로 다른 작업을 병렬로 수행합니다. 각각의 프로세서는 다른 작업을 독립적으로 처리합니다. 

병렬 처리의 구현
- 멀티 쓰레딩 : 단일 컴퓨터의 멀티코어 프로세서에서 여러 스레드를 통해 병렬 처리를 구현
- 분산 컴퓨팅 : 여러 컴퓨터 자원을 결합하여 대규모의 병렬 처리작업 수행
- 병렬 컴퓨팅 프레임워크 : MPI(Message Passing Interface), OpenMP, CUDA(특히 GPU를 사용하는 경우) 와 같은 프레임 워크를 사용하여 병렬 프로그램을 작성한다. 


CUDA의 주요 특징
대규모 병렬 처리: CUDA는 수천 개의 코어를 가진 GPU에서 대규모 병렬 처리를 가능하게 합니다.
프로그래밍 용이성: CUDA C/C++와 같은 일반적인 프로그래밍 언어를 기반으로 하므로, GPU 기반의 병렬 처리 프로그램을 쉽게 작성할 수 있습니다.
고성능 컴퓨팅: 대량의 데이터를 빠르게 처리할 수 있어 고성능 컴퓨팅 응용 프로그램에 이상적입니다.
메모리 관리: GPU의 글로벌 메모리에 직접 접근하고 관리할 수 있는 기능을 제공합니다.

CUDA 프로그래밍 기본
CUDA 프로그래밍은 주로 다음의 두 부분으로 나뉩니다:

호스트 코드 (Host Code): CPU에서 실행되는 코드로, 일반적인 C/C++ 코드입니다.
커널 코드 (Kernel Code): GPU에서 병렬로 실행되는 코드로, CUDA의 확장된 C/C++ 형태를 사용합니다.
->예시 코드는 파일첨부함