리눅스 실시간 스케줄링 시스템
리눅스에서 실시간 스케줄링은 특정 작업에 더 높은 우선순위를 부여하고, 보다 예측 가능한 실행을 보장하는 데 사용됩니다. 실시간 시스템의 주요 목적은 반응 시간을 최소화하고, 작업 처리 순서를 엄격하게 관리하는 것입니다.

1. 스케줄링 정책:

SCHED_FIFO: FIFO 실시간 정책입니다. 같은 우선순위를 가진 프로세스 간에는, 먼저 대기열에 들어온 프로세스가 먼저 실행됩니다.
SCHED_RR: Round-Robin 실시간 정책입니다. 이 정책은 동일한 우선순위를 가진 프로세스들에게 시간 할당량을 순환식으로 분배합니다.
SCHED_DEADLINE: 각 프로세스에게 실행 마감 시간을 부여합니다. 이 정책은 마감 시간이 가장 임박한 작업에게 우선순위를 부여합니다.



2. 우선순위 역전 방지:
우선순위 상속 (Priority Inheritance)
-우선순위 역전(Priority Inversion)은 낮은 우선순위의 프로세스가 높은 우선순위의 프로세스를 막는 상황을 말합니다. 우선순위 상속은 이를 방지하기 위해, 낮은 우선순위의 프로세스가 높은 우선순위의 프로세스를 차단할 경우, 낮은 우선순위 프로세스의 우선순위를 일시적으로 높여주는 기법입니다.



3. CPU 고정 (CPU Affinity)
4. 락 회피 (Lock Avoidance) 및 비동기 프로그래밍
5. 실시간 타이머 (Real-Time Timers)(POSIX 실시간 타이머)
6. 메모리관리(Memory Management)-> memory Locking (메모리잠금-> 실시간 프로세스가 실행되는 동안 메모리 페이징이 발생하지 않도록 하기 위해)
