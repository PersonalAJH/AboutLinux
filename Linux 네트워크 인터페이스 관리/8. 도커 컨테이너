1. 네트워크 네임스페이스(Network Namespace)
    - 네트워크 네임스페이스는 리눅스에서 제공하는 가상화 기술 중 하나로, 서로 격리된 네트워크 스택(인터페이스, 라우팅 테이블, 방화벽 규칙 등)을 제공하는 환경을 만듭니다. 각 네트워크 네임스페이스는 독립적으로 구성되며, 다른 네임스페이스와 네트워크 리소스를 공유하지 않습니다.
    - 주요 특징
        1. 네트워크 격리: 각 네트워크 네임스페이스는 독립된 네트워크 인터페이스를 가지므로, 다른 네임스페이스에서 이루어지는 네트워크 트래픽에 접근할 수 없습니다.
        2. 컨테이너와의 연관성: 컨테이너는 기본적으로 네트워크 네임스페이스를 사용하여 다른 컨테이너와 네트워크 환경을 분리합니다.
        3. 응용 프로그램의 독립 실행: 다양한 네트워크 환경에서 동일한 서버 내에서 여러 네트워크 구성을 실행할 수 있습니다.



2. 컨테이너 네트워킹
    - 컨테이너화된 환경에서는 애플리케이션이 컨테이너 내부에서 실행되며, 컨테이너 간 또는 외부와의 네트워크 통신을 설정해야 합니다. Docker와 Kubernetes 같은 컨테이너 관리 도구들은 이러한 네트워킹을 관리하는 다양한 옵션을 제공합니다.
    - Docker 네트워킹
        - Docker에서는 컨테이너가 다양한 네트워크 모드를 통해 통신할 수 있습니다:
            1. Bridge 모드: 기본 Docker 네트워크 모드로, 여러 컨테이너가 가상 브릿지를 통해 통신할 수 있습니다. 각 컨테이너는 가상 브릿지와 연결되며, NAT(Network Address Translation)를 통해 외부 네트워크와 연결됩니다.
            2. Host 모드: 컨테이너가 호스트 시스템의 네트워크 스택을 그대로 사용하는 모드입니다. 이 경우, 컨테이너는 호스트의 IP 주소를 그대로 사용합니다.
            3. None 모드: 네트워크 인터페이스가 없는 완전히 격리된 컨테이너를 생성합니다.
            4. Overlay 네트워크: Docker Swarm이나 Kubernetes 같은 오케스트레이션 환경에서 여러 호스트에 분산된 컨테이너가 서로 통신할 수 있도록 하는 네트워크입니다.


3. 컨테이너 네트워킹의 주요 요소
    - 가상 네트워크 인터페이스: 컨테이너마다 가상 네트워크 인터페이스(Veth pair)가 할당되며, 이를 통해 외부 네트워크와 연결됩니다.
    - 네트워크 플러그인(CNI): Kubernetes와 같은 컨테이너 오케스트레이션 시스템에서 네트워크 관리를 쉽게 하기 위한 플러그인입니다. 다양한 네트워크 토폴로지를 구현할 수 있습니다.
    - DNS: 컨테이너화된 애플리케이션은 주로 DNS를 통해 서로 통신하며, Kubernetes는 CoreDNS를 사용하여 클러스터 내부에서 이름 기반의 통신을 지원합니다.